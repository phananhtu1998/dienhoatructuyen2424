// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0012_area.sql

package database

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const addArea = `-- name: AddArea :execresult
INSERT INTO ` + "`" + `area` + "`" + ` (
    id,
    code,
    name,
    is_deleted,
    created_at,
    updated_at
)
VALUES(?,?,?,false,NOW(),NOW())
`

type AddAreaParams struct {
	ID   string
	Code string
	Name string
}

func (q *Queries) AddArea(ctx context.Context, arg AddAreaParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addArea, arg.ID, arg.Code, arg.Name)
}

const checkExistAreaByName = `-- name: CheckExistAreaByName :one
SELECT count(id)
FROM ` + "`" + `area` + "`" + `
WHERE is_deleted = false AND name  = ?
`

func (q *Queries) CheckExistAreaByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkExistAreaByName, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAllArea = `-- name: CountAllArea :one
SELECT count(id)
FROM ` + "`" + `area` + "`" + `
WHERE is_deleted = false 
AND (
  ? IS NULL OR
  code LIKE CONCAT('%', ?, '%') OR 
  name LIKE CONCAT('%', ?, '%') 
)
`

type CountAllAreaParams struct {
	Column1  interface{}
	CONCAT   interface{}
	CONCAT_2 interface{}
}

func (q *Queries) CountAllArea(ctx context.Context, arg CountAllAreaParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllArea, arg.Column1, arg.CONCAT, arg.CONCAT_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAreasByIds = `-- name: DeleteAreasByIds :exec
UPDATE ` + "`" + `area` + "`" + `
SET
    is_deleted = true,
    updated_at = NOW()
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteAreasByIds(ctx context.Context, ids []string) error {
	query := deleteAreasByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getAreaById = `-- name: GetAreaById :one
SELECT id, code, name,created_at, updated_at
FROM ` + "`" + `area` + "`" + `
WHERE id = ? AND is_deleted = false
`

type GetAreaByIdRow struct {
	ID        string
	Code      string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetAreaById(ctx context.Context, id string) (GetAreaByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAreaById, id)
	var i GetAreaByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListArea = `-- name: GetListArea :many
SELECT id, code, name, created_at, updated_at
FROM ` + "`" + `area` + "`" + ` 
WHERE is_deleted = false
AND (
  ? IS NULL OR
  code LIKE CONCAT('%', ?, '%') OR 
  name LIKE CONCAT('%', ?, '%') 
)
LIMIT ? OFFSET ?
`

type GetListAreaParams struct {
	Column1  interface{}
	CONCAT   interface{}
	CONCAT_2 interface{}
	Limit    int32
	Offset   int32
}

type GetListAreaRow struct {
	ID        string
	Code      string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetListArea(ctx context.Context, arg GetListAreaParams) ([]GetListAreaRow, error) {
	rows, err := q.db.QueryContext(ctx, getListArea,
		arg.Column1,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListAreaRow
	for rows.Next() {
		var i GetListAreaRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAreaById = `-- name: UpdateAreaById :exec
UPDATE ` + "`" + `area` + "`" + ` 
SET
    name = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateAreaByIdParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateAreaById(ctx context.Context, arg UpdateAreaByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateAreaById, arg.Name, arg.ID)
	return err
}
