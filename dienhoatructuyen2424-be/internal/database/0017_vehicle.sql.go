// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0017_vehicle.sql

package database

import (
	"context"
	"database/sql"
)

const addVehicle = `-- name: AddVehicle :execresult
INSERT INTO ` + "`" + `vehicle` + "`" + ` (
    id,
    code,
    number_plate,
    customer_id,
    parking_lot_id,
    is_deleted,
    created_at,
    updated_at
)
VALUES(?,?,?,?,?,false,NOW(),NOW())
`

type AddVehicleParams struct {
	ID           string
	Code         string
	NumberPlate  string
	CustomerID   string
	ParkingLotID string
}

func (q *Queries) AddVehicle(ctx context.Context, arg AddVehicleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addVehicle,
		arg.ID,
		arg.Code,
		arg.NumberPlate,
		arg.CustomerID,
		arg.ParkingLotID,
	)
}

const countListVehicle = `-- name: CountListVehicle :one
SELECT count(v.id)
FROM ` + "`" + `vehicle` + "`" + ` v
JOIN ` + "`" + `customer_info` + "`" + ` ci ON ci.id = v.customer_id
JOIN ` + "`" + `parking_lot` + "`" + ` pl ON pl.id = v.parking_lot_id
WHERE v.is_deleted = false AND pl.is_deleted = false
  AND (
    ? IS NULL OR
    v.code LIKE CONCAT('%', ?, '%') OR 
    v.number_plate LIKE CONCAT('%', ?, '%') OR 
    ci.name LIKE CONCAT('%', ?, '%') OR
    pl.name LIKE CONCAT('%', ?, '%') 
  )
  AND (
    ? IS NULL OR ? = '' OR pl.id = ?
  )
`

type CountListVehicleParams struct {
	Column1  interface{}
	CONCAT   interface{}
	CONCAT_2 interface{}
	CONCAT_3 interface{}
	CONCAT_4 interface{}
	Column6  interface{}
	Column7  interface{}
	ID       string
}

func (q *Queries) CountListVehicle(ctx context.Context, arg CountListVehicleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countListVehicle,
		arg.Column1,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.CONCAT_4,
		arg.Column6,
		arg.Column7,
		arg.ID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListVehicle = `-- name: GetListVehicle :many
SELECT v.id,v.code,v.number_plate,ci.name as Name_customer,pl.name as Name_parking_lot,ci.state
FROM ` + "`" + `vehicle` + "`" + ` v
JOIN ` + "`" + `customer_info` + "`" + ` ci ON ci.id = v.customer_id
JOIN ` + "`" + `parking_lot` + "`" + ` pl ON pl.id = v.parking_lot_id
WHERE v.is_deleted = false AND pl.is_deleted = false
  AND (
    ? IS NULL OR
    v.code LIKE CONCAT('%', ?, '%') OR 
    v.number_plate LIKE CONCAT('%', ?, '%') OR 
    ci.name LIKE CONCAT('%', ?, '%') OR
    pl.name LIKE CONCAT('%', ?, '%') 
  )
  AND (
    ? IS NULL OR ? = '' OR pl.id = ?
  )
  LIMIT ? OFFSET ?
`

type GetListVehicleParams struct {
	Column1  interface{}
	CONCAT   interface{}
	CONCAT_2 interface{}
	CONCAT_3 interface{}
	CONCAT_4 interface{}
	Column6  interface{}
	Column7  interface{}
	ID       string
	Limit    int32
	Offset   int32
}

type GetListVehicleRow struct {
	ID             string
	Code           string
	NumberPlate    string
	NameCustomer   string
	NameParkingLot string
	State          int8
}

func (q *Queries) GetListVehicle(ctx context.Context, arg GetListVehicleParams) ([]GetListVehicleRow, error) {
	rows, err := q.db.QueryContext(ctx, getListVehicle,
		arg.Column1,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.CONCAT_4,
		arg.Column6,
		arg.Column7,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListVehicleRow
	for rows.Next() {
		var i GetListVehicleRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.NumberPlate,
			&i.NameCustomer,
			&i.NameParkingLot,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVehicleById = `-- name: GetVehicleById :one
SELECT v.id,v.code,v.number_plate,ci.name as Name_customer,pl.name as Name_parking_lot,ci.state
FROM ` + "`" + `vehicle` + "`" + ` v
JOIN ` + "`" + `customer_info` + "`" + ` ci ON ci.id = v.customer_id
JOIN ` + "`" + `parking_lot` + "`" + ` pl ON pl.id = v.parking_lot_id
WHERE v.is_deleted = false AND pl.is_deleted = false AND v.id = ?
`

type GetVehicleByIdRow struct {
	ID             string
	Code           string
	NumberPlate    string
	NameCustomer   string
	NameParkingLot string
	State          int8
}

func (q *Queries) GetVehicleById(ctx context.Context, id string) (GetVehicleByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getVehicleById, id)
	var i GetVehicleByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NumberPlate,
		&i.NameCustomer,
		&i.NameParkingLot,
		&i.State,
	)
	return i, err
}
