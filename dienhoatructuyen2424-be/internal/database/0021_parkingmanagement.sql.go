// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0021_parkingmanagement.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addParkingManagement = `-- name: AddParkingManagement :execresult
INSERT INTO ` + "`" + `parking_management` + "`" + ` (
    id,
    code,
    customer_id,
    parking_spot_id,
    status,
    created_at,
    updated_at
)
VALUES(?,?,?,?,?,NOW(),NOW())
`

type AddParkingManagementParams struct {
	ID            string
	Code          string
	CustomerID    string
	ParkingSpotID string
	Status        int8
}

func (q *Queries) AddParkingManagement(ctx context.Context, arg AddParkingManagementParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addParkingManagement,
		arg.ID,
		arg.Code,
		arg.CustomerID,
		arg.ParkingSpotID,
		arg.Status,
	)
}

const getListCustomerParking = `-- name: GetListCustomerParking :many
SELECT ps.id,ci.name,ci.email,v.number_plate,ci.mobile,pm.code, pm.time_checkin,ps.name as nameparkingspot,pm.status as statusPm
FROM customer_info ci
JOIN vehicle v ON v.customer_id = ci.id
JOIN parking_management pm ON pm.customer_id = ci.id
JOIN parking_spot ps ON pm.parking_spot_id = ps.id
JOIN parking_floor_management pfm ON pfm.id = ps.parking_floor_id
JOIN parking_lot pl ON pl.id = pfm.parking_lot_id
WHERE pl.id = ? AND pfm.id = ? AND  ps.status = ? AND
v.is_deleted = false AND ps.is_deleted = false AND pfm.is_deleted = false AND pl.is_deleted = false
`

type GetListCustomerParkingParams struct {
	ParkingLotID   string
	ParkingFloorID string
	Status         int8
}

type GetListCustomerParkingRow struct {
	ID              string
	Name            string
	Email           string
	NumberPlate     string
	Mobile          string
	Code            string
	TimeCheckin     sql.NullString
	Nameparkingspot string
	Statuspm        int8
}

func (q *Queries) GetListCustomerParking(ctx context.Context, arg GetListCustomerParkingParams) ([]GetListCustomerParkingRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCustomerParking, arg.ParkingLotID, arg.ParkingFloorID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCustomerParkingRow
	for rows.Next() {
		var i GetListCustomerParkingRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.NumberPlate,
			&i.Mobile,
			&i.Code,
			&i.TimeCheckin,
			&i.Nameparkingspot,
			&i.Statuspm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListCustomerRegister = `-- name: GetListCustomerRegister :many
SELECT ci.name,ci.email,v.number_plate,ci.mobile,pm.code, mbl.time_booking,pm.status as statusPm,pl.id
FROM customer_info ci
JOIN vehicle v ON v.customer_id = ci.id
JOIN parking_management pm ON pm.customer_id = ci.id
JOIN parking_lot pl ON pl.id = v.parking_lot_id
JOIN manage_booking_list mbl ON ci.id = mbl.customer_id
WHERE pl.id = ? AND 
v.is_deleted = false AND pl.is_deleted = false AND mbl.status = 'Đã xác nhận' AND pm.status = ?
`

type GetListCustomerRegisterParams struct {
	ParkingLotID string
	Status       int8
}

type GetListCustomerRegisterRow struct {
	Name        string
	Email       string
	NumberPlate string
	Mobile      string
	Code        string
	TimeBooking time.Time
	Statuspm    int8
	ID          string
}

func (q *Queries) GetListCustomerRegister(ctx context.Context, arg GetListCustomerRegisterParams) ([]GetListCustomerRegisterRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCustomerRegister, arg.ParkingLotID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCustomerRegisterRow
	for rows.Next() {
		var i GetListCustomerRegisterRow
		if err := rows.Scan(
			&i.Name,
			&i.Email,
			&i.NumberPlate,
			&i.Mobile,
			&i.Code,
			&i.TimeBooking,
			&i.Statuspm,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListParkingManagement = `-- name: GetListParkingManagement :many
SELECT pm.id,pm.status as statusPm,pm.time_checkin,pm.code,v.number_plate,ci.name,ci.mobile,ci.email,ps.name as nameparkingspot
FROM ` + "`" + `parking_management` + "`" + ` pm
LEFT JOIN parking_spot ps ON ps.id = pm.parking_spot_id
LEFT JOIN customer_info ci ON ci.id = pm.customer_id
LEFT JOIN vehicle v ON v.customer_id = ci.id
LEFT JOIN parking_lot pl ON pl.id = v.parking_lot_id
WHERE v.is_deleted = false AND pl.is_deleted = false AND pl.id = ?
 AND (
    ? = -1 OR pm.status = ?
)
`

type GetListParkingManagementParams struct {
	ID      string
	Column2 interface{}
	Status  int8
}

type GetListParkingManagementRow struct {
	ID              string
	Statuspm        int8
	TimeCheckin     sql.NullString
	Code            string
	NumberPlate     sql.NullString
	Name            sql.NullString
	Mobile          sql.NullString
	Email           sql.NullString
	Nameparkingspot sql.NullString
}

func (q *Queries) GetListParkingManagement(ctx context.Context, arg GetListParkingManagementParams) ([]GetListParkingManagementRow, error) {
	rows, err := q.db.QueryContext(ctx, getListParkingManagement, arg.ID, arg.Column2, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListParkingManagementRow
	for rows.Next() {
		var i GetListParkingManagementRow
		if err := rows.Scan(
			&i.ID,
			&i.Statuspm,
			&i.TimeCheckin,
			&i.Code,
			&i.NumberPlate,
			&i.Name,
			&i.Mobile,
			&i.Email,
			&i.Nameparkingspot,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListVehicleManagement = `-- name: GetListVehicleManagement :many
SELECT ps.id,ps.name,ps.spot_number,ps.x,ps.y,ps.status
FROM parking_spot ps
JOIN parking_floor_management pfm ON pfm.id = ps.parking_floor_id
JOIN parking_lot pl ON pl.id = pfm.parking_lot_id
WHERE  pl.id = ? AND pfm.id = ? AND pl.is_deleted = false and ps.is_deleted = false AND pfm.is_deleted = false
`

type GetListVehicleManagementParams struct {
	ParkingLotID   string
	ParkingFloorID string
}

type GetListVehicleManagementRow struct {
	ID         string
	Name       string
	SpotNumber int32
	X          int32
	Y          int32
	Status     int8
}

func (q *Queries) GetListVehicleManagement(ctx context.Context, arg GetListVehicleManagementParams) ([]GetListVehicleManagementRow, error) {
	rows, err := q.db.QueryContext(ctx, getListVehicleManagement, arg.ParkingLotID, arg.ParkingFloorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListVehicleManagementRow
	for rows.Next() {
		var i GetListVehicleManagementRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SpotNumber,
			&i.X,
			&i.Y,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
