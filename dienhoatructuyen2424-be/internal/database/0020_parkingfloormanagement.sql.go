// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0020_parkingfloormanagement.sql

package database

import (
	"context"
	"database/sql"
)

const addParkingFloor = `-- name: AddParkingFloor :execresult
INSERT INTO ` + "`" + `parking_floor_management` + "`" + ` (
    id,
    name,
    parking_lot_id,
    number,
    ` + "`" + `column` + "`" + `,
    ` + "`" + `row` + "`" + `,
    is_deleted,
    created_at,
    updated_at
)
VALUES(?,?,?,?,?,?,false,NOW(),NOW())
`

type AddParkingFloorParams struct {
	ID           string
	Name         string
	ParkingLotID string
	Number       int32
	Column       int32
	Row          int32
}

func (q *Queries) AddParkingFloor(ctx context.Context, arg AddParkingFloorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addParkingFloor,
		arg.ID,
		arg.Name,
		arg.ParkingLotID,
		arg.Number,
		arg.Column,
		arg.Row,
	)
}

const getFloorById = `-- name: GetFloorById :one
SELECT id, name, number, ` + "`" + `column` + "`" + `, ` + "`" + `row` + "`" + ` FROM parking_floor_management WHERE id = ? AND is_deleted = false
`

type GetFloorByIdRow struct {
	ID     string
	Name   string
	Number int32
	Column int32
	Row    int32
}

func (q *Queries) GetFloorById(ctx context.Context, id string) (GetFloorByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getFloorById, id)
	var i GetFloorByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Column,
		&i.Row,
	)
	return i, err
}

const getParkingFloorByParkingLotId = `-- name: GetParkingFloorByParkingLotId :many
SELECT id, name, ` + "`" + `column` + "`" + `, ` + "`" + `row` + "`" + ` FROM parking_floor_management WHERE parking_lot_id = ? AND is_deleted = false ORDER BY number ASC
`

type GetParkingFloorByParkingLotIdRow struct {
	ID     string
	Name   string
	Column int32
	Row    int32
}

func (q *Queries) GetParkingFloorByParkingLotId(ctx context.Context, parkingLotID string) ([]GetParkingFloorByParkingLotIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getParkingFloorByParkingLotId, parkingLotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetParkingFloorByParkingLotIdRow
	for rows.Next() {
		var i GetParkingFloorByParkingLotIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Column,
			&i.Row,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParkingFloorById = `-- name: UpdateParkingFloorById :exec
UPDATE ` + "`" + `parking_floor_management` + "`" + ` 
SET 
    ` + "`" + `column` + "`" + ` = ?,
    ` + "`" + `row` + "`" + ` = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateParkingFloorByIdParams struct {
	Column int32
	Row    int32
	ID     string
}

func (q *Queries) UpdateParkingFloorById(ctx context.Context, arg UpdateParkingFloorByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateParkingFloorById, arg.Column, arg.Row, arg.ID)
	return err
}
