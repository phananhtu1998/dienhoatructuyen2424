// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0008_customer_verify.sql

package database

import (
	"context"
	"database/sql"
)

const checkKeyHashExists = `-- name: CheckKeyHashExists :one
SELECT COUNT(id) FROM ` + "`" + `customer_verify` + "`" + ` WHERE is_deleted = false AND verify_key_hash = ?
`

func (q *Queries) CheckKeyHashExists(ctx context.Context, verifyKeyHash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkKeyHashExists, verifyKeyHash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getInfoOTP = `-- name: GetInfoOTP :one
SELECT id, verify_otp, verify_email, verify_key_hash, is_verified, is_deleted, created_at, update_at
FROM ` + "`" + `customer_verify` + "`" + `
WHERE verify_key_hash = ?
`

func (q *Queries) GetInfoOTP(ctx context.Context, verifyKeyHash string) (CustomerVerify, error) {
	row := q.db.QueryRowContext(ctx, getInfoOTP, verifyKeyHash)
	var i CustomerVerify
	err := row.Scan(
		&i.ID,
		&i.VerifyOtp,
		&i.VerifyEmail,
		&i.VerifyKeyHash,
		&i.IsVerified,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getValidOTP = `-- name: GetValidOTP :one
SELECT verify_otp, verify_key_hash, verify_email, id
FROM ` + "`" + `customer_verify` + "`" + `
WHERE verify_key_hash = ? AND is_verified = 0
`

type GetValidOTPRow struct {
	VerifyOtp     string
	VerifyKeyHash string
	VerifyEmail   string
	ID            string
}

func (q *Queries) GetValidOTP(ctx context.Context, verifyKeyHash string) (GetValidOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getValidOTP, verifyKeyHash)
	var i GetValidOTPRow
	err := row.Scan(
		&i.VerifyOtp,
		&i.VerifyKeyHash,
		&i.VerifyEmail,
		&i.ID,
	)
	return i, err
}

const insertOTPVerify = `-- name: InsertOTPVerify :execresult
INSERT INTO ` + "`" + `customer_verify` + "`" + ` (
    id,
    verify_otp,
    verify_email,
    verify_key_hash, 
    is_verified, 
    is_deleted, 
    created_at, 
    update_at
)
VALUES (?, ?, ?, ?, 0, 0, NOW(), NOW())
`

type InsertOTPVerifyParams struct {
	ID            string
	VerifyOtp     string
	VerifyEmail   string
	VerifyKeyHash string
}

func (q *Queries) InsertOTPVerify(ctx context.Context, arg InsertOTPVerifyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertOTPVerify,
		arg.ID,
		arg.VerifyOtp,
		arg.VerifyEmail,
		arg.VerifyKeyHash,
	)
}

const updateCustomerVerificationStatus = `-- name: UpdateCustomerVerificationStatus :exec
UPDATE ` + "`" + `customer_verify` + "`" + `
SET is_verified = 1,
    update_at = now()
WHERE verify_key_hash = ?
`

func (q *Queries) UpdateCustomerVerificationStatus(ctx context.Context, verifyKeyHash string) error {
	_, err := q.db.ExecContext(ctx, updateCustomerVerificationStatus, verifyKeyHash)
	return err
}
