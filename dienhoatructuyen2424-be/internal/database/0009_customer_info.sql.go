// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0009_customer_info.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addCustomerHaveUserId = `-- name: AddCustomerHaveUserId :execresult
INSERT INTO ` + "`" + `customer_info` + "`" + ` (
    id, code, username, name, payment_id, image, state, mobile, 
    gender, birthday, email, is_authentication, created_at, update_at
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type AddCustomerHaveUserIdParams struct {
	ID               string
	Code             string
	Username         string
	Name             string
	PaymentID        string
	Image            string
	State            int8
	Mobile           string
	Gender           int8
	Birthday         time.Time
	Email            string
	IsAuthentication int8
}

func (q *Queries) AddCustomerHaveUserId(ctx context.Context, arg AddCustomerHaveUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCustomerHaveUserId,
		arg.ID,
		arg.Code,
		arg.Username,
		arg.Name,
		arg.PaymentID,
		arg.Image,
		arg.State,
		arg.Mobile,
		arg.Gender,
		arg.Birthday,
		arg.Email,
		arg.IsAuthentication,
	)
}

const checkStateByVerifyHash = `-- name: CheckStateByVerifyHash :one
SELECT ci.state 
FROM customer_info ci
JOIN customer_verify cv ON cv.verify_email = ci.email
WHERE cv.verify_key_hash = ?
`

func (q *Queries) CheckStateByVerifyHash(ctx context.Context, verifyKeyHash string) (int8, error) {
	row := q.db.QueryRowContext(ctx, checkStateByVerifyHash, verifyKeyHash)
	var state int8
	err := row.Scan(&state)
	return state, err
}

const countCustomerById = `-- name: CountCustomerById :one
SELECT count(id)
FROM ` + "`" + `customer_info` + "`" + `
WHERE id = ?
`

func (q *Queries) CountCustomerById(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCustomerById, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countListCustomer = `-- name: CountListCustomer :one
SELECT count(ci.id)
FROM customer_info ci
JOIN payment pm ON pm.id = ci.payment_id
WHERE pm.is_deleted = false
  AND (
    ? IS NULL OR
    ci.code LIKE CONCAT('%', ?, '%') OR 
    ci.email LIKE CONCAT('%', ?, '%') OR 
    ci.username LIKE CONCAT('%', ?, '%')
  )
  AND (
    ? IS NULL OR ? = '' OR ci.payment_id = ?
  )
`

type CountListCustomerParams struct {
	Column1   interface{}
	CONCAT    interface{}
	CONCAT_2  interface{}
	CONCAT_3  interface{}
	Column5   interface{}
	Column6   interface{}
	PaymentID string
}

func (q *Queries) CountListCustomer(ctx context.Context, arg CountListCustomerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countListCustomer,
		arg.Column1,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Column5,
		arg.Column6,
		arg.PaymentID,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT ci.id, ci.code,ci.name as Name_Customer,ci.username,ci.mobile,ci.birthday,ci.gender,ci.email,v.number_plate,pl.name as Name_parking_lot,p.name as Name_payment,ci.image,ci.state
FROM customer_info ci
JOIN payment p ON p.id = ci.payment_id
JOIN vehicle v ON v.customer_id = ci.id
JOIN parking_lot pl ON v.parking_lot_id = pl.id
WHERE p.is_deleted = false AND v.is_deleted = false AND pl.is_deleted = false AND ci.id = ?
`

type GetCustomerByIdRow struct {
	ID             string
	Code           string
	NameCustomer   string
	Username       string
	Mobile         string
	Birthday       time.Time
	Gender         int8
	Email          string
	NumberPlate    string
	NameParkingLot string
	NamePayment    string
	Image          string
	State          int8
}

func (q *Queries) GetCustomerById(ctx context.Context, id string) (GetCustomerByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i GetCustomerByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NameCustomer,
		&i.Username,
		&i.Mobile,
		&i.Birthday,
		&i.Gender,
		&i.Email,
		&i.NumberPlate,
		&i.NameParkingLot,
		&i.NamePayment,
		&i.Image,
		&i.State,
	)
	return i, err
}

const getCustomerInfoById = `-- name: GetCustomerInfoById :one
SELECT id, code, state, is_authentication, email, username, name, image, mobile, gender, birthday
FROM ` + "`" + `customer_info` + "`" + `
WHERE id = ?
`

type GetCustomerInfoByIdRow struct {
	ID               string
	Code             string
	State            int8
	IsAuthentication int8
	Email            string
	Username         string
	Name             string
	Image            string
	Mobile           string
	Gender           int8
	Birthday         time.Time
}

func (q *Queries) GetCustomerInfoById(ctx context.Context, id string) (GetCustomerInfoByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerInfoById, id)
	var i GetCustomerInfoByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.State,
		&i.IsAuthentication,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.Image,
		&i.Mobile,
		&i.Gender,
		&i.Birthday,
	)
	return i, err
}

const getCustomerInfoByUsername = `-- name: GetCustomerInfoByUsername :one
SELECT id, code, state, is_authentication, email, username, name, image, mobile, gender, birthday
FROM ` + "`" + `customer_info` + "`" + `
WHERE username = ?
`

type GetCustomerInfoByUsernameRow struct {
	ID               string
	Code             string
	State            int8
	IsAuthentication int8
	Email            string
	Username         string
	Name             string
	Image            string
	Mobile           string
	Gender           int8
	Birthday         time.Time
}

func (q *Queries) GetCustomerInfoByUsername(ctx context.Context, username string) (GetCustomerInfoByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerInfoByUsername, username)
	var i GetCustomerInfoByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.State,
		&i.IsAuthentication,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.Image,
		&i.Mobile,
		&i.Gender,
		&i.Birthday,
	)
	return i, err
}

const getListCustomer = `-- name: GetListCustomer :many
SELECT 
  ci.id, 
  ci.code,
  ci.username,
  ci.email,
  ci.image,
  pm.name,
  ci.state 
FROM customer_info ci
JOIN payment pm ON pm.id = ci.payment_id
WHERE pm.is_deleted = false
  AND (
    ? IS NULL OR
    ci.code LIKE CONCAT('%', ?, '%') OR 
    ci.email LIKE CONCAT('%', ?, '%') OR 
    ci.username LIKE CONCAT('%', ?, '%')
  )
  AND (
    ? IS NULL OR ? = '' OR ci.payment_id = ?
  )
LIMIT ? OFFSET ?
`

type GetListCustomerParams struct {
	Column1   interface{}
	CONCAT    interface{}
	CONCAT_2  interface{}
	CONCAT_3  interface{}
	Column5   interface{}
	Column6   interface{}
	PaymentID string
	Limit     int32
	Offset    int32
}

type GetListCustomerRow struct {
	ID       string
	Code     string
	Username string
	Email    string
	Image    string
	Name     string
	State    int8
}

func (q *Queries) GetListCustomer(ctx context.Context, arg GetListCustomerParams) ([]GetListCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCustomer,
		arg.Column1,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.CONCAT_3,
		arg.Column5,
		arg.Column6,
		arg.PaymentID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCustomerRow
	for rows.Next() {
		var i GetListCustomerRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Username,
			&i.Email,
			&i.Image,
			&i.Name,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatusCustomerInfo = `-- name: GetStatusCustomerInfo :one
SELECT ci.id, ci.code, ci.state, ci.is_authentication, ci.email, ci.username, ci.name, ci.image, ci.mobile, ci.gender, ci.birthday, ci.payment_id, v.parking_lot_id
FROM ` + "`" + `customer_info` + "`" + ` ci
LEFT JOIN vehicle v ON v.customer_id = ci.id
WHERE ci.username = ?
`

type GetStatusCustomerInfoRow struct {
	ID               string
	Code             string
	State            int8
	IsAuthentication int8
	Email            string
	Username         string
	Name             string
	Image            string
	Mobile           string
	Gender           int8
	Birthday         time.Time
	PaymentID        string
	ParkingLotID     sql.NullString
}

func (q *Queries) GetStatusCustomerInfo(ctx context.Context, username string) (GetStatusCustomerInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getStatusCustomerInfo, username)
	var i GetStatusCustomerInfoRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.State,
		&i.IsAuthentication,
		&i.Email,
		&i.Username,
		&i.Name,
		&i.Image,
		&i.Mobile,
		&i.Gender,
		&i.Birthday,
		&i.PaymentID,
		&i.ParkingLotID,
	)
	return i, err
}

const lockAndUnlockCustomerById = `-- name: LockAndUnlockCustomerById :exec
UPDATE ` + "`" + `customer_info` + "`" + `
SET state = ?,
    update_at = now()
WHERE id = ?
`

type LockAndUnlockCustomerByIdParams struct {
	State int8
	ID    string
}

func (q *Queries) LockAndUnlockCustomerById(ctx context.Context, arg LockAndUnlockCustomerByIdParams) error {
	_, err := q.db.ExecContext(ctx, lockAndUnlockCustomerById, arg.State, arg.ID)
	return err
}

const updateCustomerInfoById = `-- name: UpdateCustomerInfoById :exec
UPDATE ` + "`" + `customer_info` + "`" + `
SET username = ?,
    name = ?,
    ` + "`" + `image` + "`" + ` = ?,
    mobile = ?,
    gender = ?,
    birthday = ?,
    payment_id = ?,
    update_at = now()
WHERE id = ?
`

type UpdateCustomerInfoByIdParams struct {
	Username  string
	Name      string
	Image     string
	Mobile    string
	Gender    int8
	Birthday  time.Time
	PaymentID string
	ID        string
}

func (q *Queries) UpdateCustomerInfoById(ctx context.Context, arg UpdateCustomerInfoByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerInfoById,
		arg.Username,
		arg.Name,
		arg.Image,
		arg.Mobile,
		arg.Gender,
		arg.Birthday,
		arg.PaymentID,
		arg.ID,
	)
	return err
}
