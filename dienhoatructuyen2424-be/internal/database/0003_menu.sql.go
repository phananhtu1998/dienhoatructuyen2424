// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0003_menu.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const countEditMenu = `-- name: CountEditMenu :one
SELECT COUNT(*) AS total_count
FROM menu AS outer_menu
WHERE outer_menu.id != ?
  AND outer_menu.is_deleted = false
  AND (
    -- Check duplicate name (exclude NULL and empty)
    (
      outer_menu.menu_name IS NOT NULL 
      AND TRIM(outer_menu.menu_name) != ''
      AND outer_menu.menu_name = (
        SELECT inner_menu.menu_name 
        FROM menu AS inner_menu 
        WHERE inner_menu.id = ?
          AND inner_menu.menu_name IS NOT NULL
          AND TRIM(inner_menu.menu_name) != ''
      )
    )
    OR
    -- Check duplicate URL (exclude NULL and empty)
    (
      outer_menu.menu_url IS NOT NULL 
      AND TRIM(outer_menu.menu_url) != ''
      AND outer_menu.menu_url = (
        SELECT inner_menu.menu_url 
        FROM menu AS inner_menu 
        WHERE inner_menu.id = ?
          AND inner_menu.menu_url IS NOT NULL
          AND TRIM(inner_menu.menu_url) != ''
      )
    )
  )
`

type CountEditMenuParams struct {
	ID   string
	ID_2 string
	ID_3 string
}

func (q *Queries) CountEditMenu(ctx context.Context, arg CountEditMenuParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countEditMenu, arg.ID, arg.ID_2, arg.ID_3)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const countMenuByURL = `-- name: CountMenuByURL :one
SELECT COUNT(*) AS total_count
FROM menu
WHERE ((menu_url = ? AND menu_url IS NOT NULL AND menu_url != '')
   OR (menu_name = ? AND menu_name IS NOT NULL AND menu_name != '')) AND is_deleted = false
`

type CountMenuByURLParams struct {
	MenuUrl  string
	MenuName string
}

func (q *Queries) CountMenuByURL(ctx context.Context, arg CountMenuByURLParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMenuByURL, arg.MenuUrl, arg.MenuName)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const countMenuWithParentId = `-- name: CountMenuWithParentId :one
SELECT COUNT(*) FROM menu WHERE menu_parent_Id = ? AND is_deleted = false
`

func (q *Queries) CountMenuWithParentId(ctx context.Context, menuParentID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMenuWithParentId, menuParentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRootMenus = `-- name: CountRootMenus :one
SELECT COUNT(*) FROM menu WHERE menu_parent_Id IS NULL AND is_deleted = false
`

func (q *Queries) CountRootMenus(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRootMenus)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMenu = `-- name: DeleteMenu :exec
UPDATE menu SET is_deleted = true WHERE id = ?
`

func (q *Queries) DeleteMenu(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const getAllMenus = `-- name: GetAllMenus :many
SELECT 
    m1.id, m1.menu_name, m1.menu_icon, m1.menu_url, m1.menu_parent_Id,
    m1.menu_level, m1.menu_number_order, m1.menu_group_name, m1.is_deleted
FROM menu m1
LEFT JOIN roles_menu rm ON rm.menu_id = m1.id
WHERE m1.is_deleted = false AND rm.role_id = ?
ORDER BY m1.menu_level ASC, m1.menu_number_order ASC
`

type GetAllMenusRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	IsDeleted       bool
}

func (q *Queries) GetAllMenus(ctx context.Context, roleID string) ([]GetAllMenusRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenus, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMenusRow
	for rows.Next() {
		var i GetAllMenusRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuName,
			&i.MenuIcon,
			&i.MenuUrl,
			&i.MenuParentID,
			&i.MenuLevel,
			&i.MenuNumberOrder,
			&i.MenuGroupName,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuById = `-- name: GetMenuById :one
SELECT 
    m1.id, m1.menu_name, m1.menu_icon, m1.menu_url, m1.menu_parent_Id, 
    m1.menu_level, m1.menu_number_order, m1.menu_group_name, m1.is_deleted, 
    m1.create_at, m1.update_at,
    COALESCE(
        CONCAT('[', GROUP_CONCAT(
            CASE 
                WHEN m2.id IS NOT NULL THEN 
                    JSON_OBJECT(
                        'id', m2.id, 
                        'menu_name', m2.menu_name, 
                        'menu_icon', m2.menu_icon, 
                        'menu_url', m2.menu_url, 
                        'menu_level', m2.menu_level,
                        'menu_number_order', m2.menu_number_order,
                        'menu_group_name', m2.menu_group_name,
                        'is_deleted', m2.is_deleted
                    )
                ELSE NULL
            END 
            ORDER BY m2.menu_number_order ASC SEPARATOR ','
        ), ']'), '[]'
    ) AS children
FROM menu m1
LEFT JOIN menu m2 ON m1.id = m2.menu_parent_Id AND m2.is_deleted = false
WHERE m1.id = ? AND m1.is_deleted = false
GROUP BY m1.id 
ORDER BY m1.menu_number_order ASC
`

type GetMenuByIdRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	IsDeleted       bool
	CreateAt        time.Time
	UpdateAt        time.Time
	Children        interface{}
}

func (q *Queries) GetMenuById(ctx context.Context, id string) (GetMenuByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMenuById, id)
	var i GetMenuByIdRow
	err := row.Scan(
		&i.ID,
		&i.MenuName,
		&i.MenuIcon,
		&i.MenuUrl,
		&i.MenuParentID,
		&i.MenuLevel,
		&i.MenuNumberOrder,
		&i.MenuGroupName,
		&i.IsDeleted,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Children,
	)
	return i, err
}

const getMenuByRoleId = `-- name: GetMenuByRoleId :many
SELECT 
    m.id,
    m.menu_name,
    m.menu_icon,
    m.menu_url,
    m.menu_level,
    m.menu_number_order,
    m.menu_parent_Id,
    m.menu_group_name,
    rm.list_method
FROM ` + "`" + `menu` + "`" + ` m
JOIN ` + "`" + `roles_menu` + "`" + ` rm ON rm.menu_id = m.id
JOIN ` + "`" + `role` + "`" + ` r ON rm.role_id = r.id
WHERE r.id = ? 
  AND m.is_deleted = false 
  AND rm.is_deleted = false 
  AND r.is_deleted = false
  AND (
    ? IS NULL OR
    m.menu_name LIKE CONCAT('%', ?, '%') 
)
ORDER BY 
    m.menu_level ASC,
    m.menu_number_order ASC
`

type GetMenuByRoleIdParams struct {
	ID      string
	Column2 interface{}
	CONCAT  interface{}
}

type GetMenuByRoleIdRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuLevel       int32
	MenuNumberOrder int32
	MenuParentID    sql.NullString
	MenuGroupName   string
	ListMethod      json.RawMessage
}

func (q *Queries) GetMenuByRoleId(ctx context.Context, arg GetMenuByRoleIdParams) ([]GetMenuByRoleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getMenuByRoleId, arg.ID, arg.Column2, arg.CONCAT)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMenuByRoleIdRow
	for rows.Next() {
		var i GetMenuByRoleIdRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuName,
			&i.MenuIcon,
			&i.MenuUrl,
			&i.MenuLevel,
			&i.MenuNumberOrder,
			&i.MenuParentID,
			&i.MenuGroupName,
			&i.ListMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMenu = `-- name: InsertMenu :execresult
INSERT INTO menu (
    id, menu_name, menu_icon, menu_url, menu_parent_Id, menu_level, 
    menu_number_order, menu_group_name, is_deleted, create_at, update_at
) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, false, NOW(), NOW())
`

type InsertMenuParams struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
}

func (q *Queries) InsertMenu(ctx context.Context, arg InsertMenuParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertMenu,
		arg.ID,
		arg.MenuName,
		arg.MenuIcon,
		arg.MenuUrl,
		arg.MenuParentID,
		arg.MenuLevel,
		arg.MenuNumberOrder,
		arg.MenuGroupName,
	)
}

const updateMenuDeleted = `-- name: UpdateMenuDeleted :exec
UPDATE menu SET is_deleted = true WHERE id = ?
`

func (q *Queries) UpdateMenuDeleted(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateMenuDeleted, id)
	return err
}

const updateSingleMenu = `-- name: UpdateSingleMenu :exec
UPDATE menu
SET 
    menu_name = ?, 
    menu_icon = ?, 
    menu_url = ?, 
    menu_parent_id = ?, 
    menu_level = ?, 
    menu_number_order = ?, 
    menu_group_name = ?
WHERE id = ?
`

type UpdateSingleMenuParams struct {
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	ID              string
}

func (q *Queries) UpdateSingleMenu(ctx context.Context, arg UpdateSingleMenuParams) error {
	_, err := q.db.ExecContext(ctx, updateSingleMenu,
		arg.MenuName,
		arg.MenuIcon,
		arg.MenuUrl,
		arg.MenuParentID,
		arg.MenuLevel,
		arg.MenuNumberOrder,
		arg.MenuGroupName,
		arg.ID,
	)
	return err
}
