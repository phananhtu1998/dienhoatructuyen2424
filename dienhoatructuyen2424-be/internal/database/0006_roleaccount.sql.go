// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0006_roleaccount.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const checkCountRoleId = `-- name: CheckCountRoleId :one
SELECT COUNT(*)
FROM ` + "`" + `role_account` + "`" + `
WHERE role_id = ? AND is_deleted = false
`

func (q *Queries) CheckCountRoleId(ctx context.Context, roleID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkCountRoleId, roleID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRoleAccount = `-- name: CreateRoleAccount :exec
INSERT INTO ` + "`" + `role_account` + "`" + ` (id, account_id, role_id,created_by, is_deleted, create_at, update_at)
VALUES (?, ?, ?, ?, false, NOW(), NOW())
`

type CreateRoleAccountParams struct {
	ID        string
	AccountID string
	RoleID    string
	CreatedBy sql.NullString
}

func (q *Queries) CreateRoleAccount(ctx context.Context, arg CreateRoleAccountParams) error {
	_, err := q.db.ExecContext(ctx, createRoleAccount,
		arg.ID,
		arg.AccountID,
		arg.RoleID,
		arg.CreatedBy,
	)
	return err
}

const deleteRoleAccount = `-- name: DeleteRoleAccount :exec
UPDATE ` + "`" + `role_account` + "`" + `
SET is_deleted = true, update_at = NOW()
WHERE id IN (?)
`

func (q *Queries) DeleteRoleAccount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRoleAccount, id)
	return err
}

const getAllRoleAccount = `-- name: GetAllRoleAccount :many
SELECT id, account_id, role_id
FROM ` + "`" + `role_account` + "`" + `
WHERE is_deleted = false
`

type GetAllRoleAccountRow struct {
	ID        string
	AccountID string
	RoleID    string
}

func (q *Queries) GetAllRoleAccount(ctx context.Context) ([]GetAllRoleAccountRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoleAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRoleAccountRow
	for rows.Next() {
		var i GetAllRoleAccountRow
		if err := rows.Scan(&i.ID, &i.AccountID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneRoleAccountByAccountId = `-- name: GetOneRoleAccountByAccountId :one
SELECT id, account_id, role_id, create_at, update_at
FROM ` + "`" + `role_account` + "`" + `
WHERE is_deleted = false AND account_id = ?
`

type GetOneRoleAccountByAccountIdRow struct {
	ID        string
	AccountID string
	RoleID    string
	CreateAt  time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetOneRoleAccountByAccountId(ctx context.Context, accountID string) (GetOneRoleAccountByAccountIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOneRoleAccountByAccountId, accountID)
	var i GetOneRoleAccountByAccountIdRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getRoleAccountByAccountId = `-- name: GetRoleAccountByAccountId :many
SELECT id, account_id, role_id, create_at, update_at
FROM ` + "`" + `role_account` + "`" + `
WHERE is_deleted = false AND account_id = ?
`

type GetRoleAccountByAccountIdRow struct {
	ID        string
	AccountID string
	RoleID    string
	CreateAt  time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetRoleAccountByAccountId(ctx context.Context, accountID string) ([]GetRoleAccountByAccountIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleAccountByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleAccountByAccountIdRow
	for rows.Next() {
		var i GetRoleAccountByAccountIdRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleAccountById = `-- name: GetRoleAccountById :one
SELECT id, account_id, role_id
FROM ` + "`" + `role_account` + "`" + `
WHERE is_deleted = false AND id = ?
`

type GetRoleAccountByIdRow struct {
	ID        string
	AccountID string
	RoleID    string
}

func (q *Queries) GetRoleAccountById(ctx context.Context, id string) (GetRoleAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleAccountById, id)
	var i GetRoleAccountByIdRow
	err := row.Scan(&i.ID, &i.AccountID, &i.RoleID)
	return i, err
}

const getRoleAccountByRoleId = `-- name: GetRoleAccountByRoleId :many
SELECT id, account_id, role_id, create_at, update_at
FROM ` + "`" + `role_account` + "`" + `
WHERE is_deleted = false AND role_id = ?
`

type GetRoleAccountByRoleIdRow struct {
	ID        string
	AccountID string
	RoleID    string
	CreateAt  time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetRoleAccountByRoleId(ctx context.Context, roleID string) ([]GetRoleAccountByRoleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoleAccountByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoleAccountByRoleIdRow
	for rows.Next() {
		var i GetRoleAccountByRoleIdRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleAccount = `-- name: UpdateRoleAccount :exec
UPDATE ` + "`" + `role_account` + "`" + `
SET account_id = ?, role_id = ?
WHERE id = ? AND is_deleted = false
`

type UpdateRoleAccountParams struct {
	AccountID string
	RoleID    string
	ID        string
}

func (q *Queries) UpdateRoleAccount(ctx context.Context, arg UpdateRoleAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleAccount, arg.AccountID, arg.RoleID, arg.ID)
	return err
}
