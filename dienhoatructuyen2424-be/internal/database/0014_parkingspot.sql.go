// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0014_parkingspot.sql

package database

import (
	"context"
	"database/sql"
	"strings"
)

const addParkingSpot = `-- name: AddParkingSpot :execresult
INSERT INTO ` + "`" + `parking_spot` + "`" + ` (
    id,
    name,
    parking_floor_id,
    qrcode,
    spot_number,
    x,
    y,
    status,
    is_deleted,
    created_at,
    updated_at
)
VALUES(?,?,?,?,?,?,?,?,false,NOW(),NOW())
`

type AddParkingSpotParams struct {
	ID             string
	Name           string
	ParkingFloorID string
	Qrcode         string
	SpotNumber     int32
	X              int32
	Y              int32
	Status         int8
}

func (q *Queries) AddParkingSpot(ctx context.Context, arg AddParkingSpotParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addParkingSpot,
		arg.ID,
		arg.Name,
		arg.ParkingFloorID,
		arg.Qrcode,
		arg.SpotNumber,
		arg.X,
		arg.Y,
		arg.Status,
	)
}

const checkDuplicateForNewSpot = `-- name: CheckDuplicateForNewSpot :one
SELECT COUNT(*) AS duplicate_count
FROM parking_spot
WHERE parking_floor_id = ? 
AND (
    name = ? 
    OR (x = ? AND y = ?)
)
AND is_deleted = false
`

type CheckDuplicateForNewSpotParams struct {
	ParkingFloorID string
	Name           string
	X              int32
	Y              int32
}

func (q *Queries) CheckDuplicateForNewSpot(ctx context.Context, arg CheckDuplicateForNewSpotParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkDuplicateForNewSpot,
		arg.ParkingFloorID,
		arg.Name,
		arg.X,
		arg.Y,
	)
	var duplicate_count int64
	err := row.Scan(&duplicate_count)
	return duplicate_count, err
}

const checkSumSpotNumber = `-- name: CheckSumSpotNumber :one
SELECT COUNT(*) AS sum_spot_number
FROM ` + "`" + `parking_spot` + "`" + `
WHERE parking_floor_id = ? AND is_deleted = false
`

func (q *Queries) CheckSumSpotNumber(ctx context.Context, parkingFloorID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkSumSpotNumber, parkingFloorID)
	var sum_spot_number int64
	err := row.Scan(&sum_spot_number)
	return sum_spot_number, err
}

const checkVehicleParked = `-- name: CheckVehicleParked :one
SELECT COUNT(*) AS sum_spot_number
FROM ` + "`" + `parking_spot` + "`" + `
WHERE parking_floor_id = ? AND status = 1 AND is_deleted = false
`

func (q *Queries) CheckVehicleParked(ctx context.Context, parkingFloorID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkVehicleParked, parkingFloorID)
	var sum_spot_number int64
	err := row.Scan(&sum_spot_number)
	return sum_spot_number, err
}

const checkVehicleParkedById = `-- name: CheckVehicleParkedById :one
SELECT COUNT(*) AS sum_spot_number
FROM ` + "`" + `parking_spot` + "`" + `
WHERE id = ? AND status = 1 AND is_deleted = false
`

func (q *Queries) CheckVehicleParkedById(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkVehicleParkedById, id)
	var sum_spot_number int64
	err := row.Scan(&sum_spot_number)
	return sum_spot_number, err
}

const deleteParkingSpotById = `-- name: DeleteParkingSpotById :exec
UPDATE ` + "`" + `parking_spot` + "`" + `
SET
    is_deleted = true,
    updated_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteParkingSpotById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteParkingSpotById, id)
	return err
}

const deleteParkingSpotByIds = `-- name: DeleteParkingSpotByIds :exec
UPDATE ` + "`" + `parking_spot` + "`" + `
SET
    is_deleted = true,
    updated_at = NOW()
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteParkingSpotByIds(ctx context.Context, ids []string) error {
	query := deleteParkingSpotByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getListParkingSpotByFloorId = `-- name: GetListParkingSpotByFloorId :many
SELECT id, name, parking_floor_id, qrcode, spot_number, status, x, y
FROM ` + "`" + `parking_spot` + "`" + `
WHERE parking_floor_id = ? AND is_deleted = false
`

type GetListParkingSpotByFloorIdRow struct {
	ID             string
	Name           string
	ParkingFloorID string
	Qrcode         string
	SpotNumber     int32
	Status         int8
	X              int32
	Y              int32
}

func (q *Queries) GetListParkingSpotByFloorId(ctx context.Context, parkingFloorID string) ([]GetListParkingSpotByFloorIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getListParkingSpotByFloorId, parkingFloorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListParkingSpotByFloorIdRow
	for rows.Next() {
		var i GetListParkingSpotByFloorIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParkingFloorID,
			&i.Qrcode,
			&i.SpotNumber,
			&i.Status,
			&i.X,
			&i.Y,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusParkingSpot = `-- name: UpdateStatusParkingSpot :exec
UPDATE ` + "`" + `parking_spot` + "`" + `
SET
    status = ?,
    updated_at = NOW()
WHERE id = ?
`

type UpdateStatusParkingSpotParams struct {
	Status int8
	ID     string
}

func (q *Queries) UpdateStatusParkingSpot(ctx context.Context, arg UpdateStatusParkingSpotParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusParkingSpot, arg.Status, arg.ID)
	return err
}
