// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0010_customer_base.sql

package database

import (
	"context"
	"database/sql"
)

const addCustomerBase = `-- name: AddCustomerBase :execresult
INSERT INTO customer_base (
    id, number, email, password, salt, created_at,update_at
) VALUES (
    ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type AddCustomerBaseParams struct {
	ID       string
	Number   int32
	Email    string
	Password string
	Salt     string
}

func (q *Queries) AddCustomerBase(ctx context.Context, arg AddCustomerBaseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCustomerBase,
		arg.ID,
		arg.Number,
		arg.Email,
		arg.Password,
		arg.Salt,
	)
}

const checkCustomerBaseExists = `-- name: CheckCustomerBaseExists :one
SELECT COUNT(*)
FROM customer_base
WHERE email = ?
`

func (q *Queries) CheckCustomerBaseExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkCustomerBaseExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOneCustomerInfo = `-- name: GetOneCustomerInfo :one
SELECT id, email, password, number, salt
FROM ` + "`" + `customer_base` + "`" + `
WHERE email = ?
`

type GetOneCustomerInfoRow struct {
	ID       string
	Email    string
	Password string
	Number   int32
	Salt     string
}

func (q *Queries) GetOneCustomerInfo(ctx context.Context, email string) (GetOneCustomerInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getOneCustomerInfo, email)
	var i GetOneCustomerInfoRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Number,
		&i.Salt,
	)
	return i, err
}

const getOneCustomerInfoAdmin = `-- name: GetOneCustomerInfoAdmin :one
SELECT id, number, email, password, salt,created_at, update_at
FROM ` + "`" + `customer_base` + "`" + `
WHERE email = ?
`

func (q *Queries) GetOneCustomerInfoAdmin(ctx context.Context, email string) (CustomerBase, error) {
	row := q.db.QueryRowContext(ctx, getOneCustomerInfoAdmin, email)
	var i CustomerBase
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
